{"version":3,"sources":["../src/helpers/accountsAreEqual.ts","../src/helpers/checkIfBalanceSufficient.ts","../src/helpers/getBalance.ts","../src/helpers/formatBalance.ts","../src/helpers/contractCall.ts","../src/helpers/getAbiMessage.ts","../src/helpers/decodeOutput.ts","../src/helpers/getExtrinsicErrorMessage.ts","../src/helpers/getGasLimit.ts","../src/helpers/deployContract.ts","../src/metadata/psp22.json","../src/helpers/getAbi.ts","../src/helpers/getDeployment.ts","../src/data/PSP22_ASSETS.json","../src/assets.ts","../src/helpers/getPSP22Balances.ts","../src/helpers/initPolkadotJs.ts","../src/helpers/transferBalance.ts","../src/helpers/unwrapResult.ts"],"names":["BN","stringCamelCase","bnToBn","_0","ContractPromise","result"],"mappings":"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","sourcesContent":["import { InjectedAccount } from '@polkadot/extension-inject/types'\n\n/**\n * Returns true if both given injected accounts have the same address.\n */\nexport const accountsAreEqual = (a1?: InjectedAccount, a2?: InjectedAccount) => {\n  return (a1?.address || '').toLowerCase() === (a2?.address || '').toLowerCase()\n}\n\n/**\n * Returns true if both given arrays of injected accounts contain the\n * same objects with the same addresses in the same order.\n */\nexport const accountArraysAreEqual = (a1: InjectedAccount[], a2: InjectedAccount[]) => {\n  if (a1.length !== a2.length) return false\n  return a1.every((a, i) => accountsAreEqual(a, a2[i]))\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { IKeyringPair } from '@polkadot/types/types'\nimport { BN, bnToBn } from '@polkadot/util'\nimport { getBalance } from './getBalance'\n\n/**\n * Fetches the balance of the given address and returns a boolean\n * whether this is zero or below an optionally passed minimum value.\n */\nexport const checkIfBalanceSufficient = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  minBalance?: bigint | BN | string | number,\n): Promise<boolean> => {\n  try {\n    const accountAddress = typeof account === 'string' ? account : account.address\n    const { reducibleBalance } = await getBalance(api, accountAddress)\n    const hasZeroBalance = !reducibleBalance || reducibleBalance.isZero()\n    const hasBalanceBelowMin =\n      minBalance && reducibleBalance && reducibleBalance.lte(bnToBn(minBalance))\n    return !hasZeroBalance && !hasBalanceBelowMin\n  } catch (e) {\n    console.error('Error while checking for minimum balance:', e)\n  }\n\n  return false\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { BN } from '@polkadot/util'\nimport { BalanceFormatterOptions, formatBalance } from './formatBalance'\n\nexport type BalanceData = {\n  tokenDecimals: number\n  tokenSymbol: string\n  freeBalance?: BN\n  freeBalanceFormatted?: string\n  reservedBalance?: BN\n  reservedBalanceFormatted?: string\n  reducibleBalance?: BN\n  reducibleBalanceFormatted?: string\n  balance?: BN\n  balanceFormatted?: string\n}\n\n/**\n * Returns the native token balance of the given `address`.\n */\nexport const getBalance = async (\n  api: ApiPromise,\n  address: string | AccountId | undefined,\n  formatterOptions?: BalanceFormatterOptions,\n): Promise<BalanceData> => {\n  if (!address) {\n    const { tokenDecimals, tokenSymbol } = parseBalanceData(api)\n    return {\n      tokenDecimals,\n      tokenSymbol,\n    }\n  }\n\n  // Query the chain and parse data\n  const result: any = await api.query.system.account(address)\n  const balanceData = parseBalanceData(api, result?.data, formatterOptions)\n\n  return balanceData\n}\n\n/**\n * Watches the native token balance of the given `address` and returns it in a callback.\n * The returned void function can be used to unsubscribe.\n */\nexport const watchBalance = async (\n  api: ApiPromise,\n  address: string | AccountId | undefined,\n  callback: (data: BalanceData) => void,\n  formatterOptions?: BalanceFormatterOptions,\n): Promise<VoidFunction | null> => {\n  const { tokenDecimals, tokenSymbol } = parseBalanceData(api)\n  if (!address) {\n    callback({\n      tokenDecimals,\n      tokenSymbol,\n    })\n    return null\n  }\n\n  // Query the chain, parse data, and call the callback\n  const unsubscribe: any = await api.query.system.account(address, ({ data }: any) => {\n    const balanceData = parseBalanceData(api, data, formatterOptions)\n    callback(balanceData)\n  })\n  return unsubscribe\n}\n\n/**\n * Helper to parse the fetched balance data.\n */\nconst parseBalanceData = (\n  api: ApiPromise,\n  data?: any,\n  formatterOptions?: BalanceFormatterOptions,\n): BalanceData => {\n  // Get the token decimals and symbol\n  const tokenDecimals = api.registry.chainDecimals?.[0] || 12\n  const tokenSymbol = api.registry.chainTokens?.[0] || 'Unit'\n\n  // Get the balance\n  const freeBalance: BN = new BN(data?.free || 0)\n  const reservedBalance: BN = new BN(data?.reserved || 0)\n  const balance = reservedBalance.add(freeBalance)\n\n  // Calculate the reducible balance (see: https://substrate.stackexchange.com/a/3009/3470)\n  const miscFrozenBalance: BN = new BN(data?.miscFrozen || 0)\n  const feeFrozenBalance: BN = new BN(data?.feeFrozen || 0)\n  const reducibleBalance = freeBalance.sub(\n    miscFrozenBalance.gt(feeFrozenBalance) ? miscFrozenBalance : feeFrozenBalance,\n  )\n\n  // Format the balance\n  const freeBalanceFormatted = formatBalance(api, freeBalance, formatterOptions)\n  const reservedBalanceFormatted = formatBalance(api, reservedBalance, formatterOptions)\n  const reducibleBalanceFormatted = formatBalance(api, reducibleBalance, formatterOptions)\n  const balanceFormatted = formatBalance(api, balance, formatterOptions)\n\n  return {\n    tokenDecimals,\n    tokenSymbol,\n    freeBalance,\n    freeBalanceFormatted,\n    reservedBalance,\n    reservedBalanceFormatted,\n    reducibleBalance,\n    reducibleBalanceFormatted,\n    balance,\n    balanceFormatted,\n  }\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { BN, formatBalance as polkadotFormatBalance } from '@polkadot/util'\n\nexport type PolkadotBalanceFormatterOptions = NonNullable<\n  Parameters<typeof polkadotFormatBalance>['1']\n>\n\nexport type BalanceFormatterOptions = Omit<\n  PolkadotBalanceFormatterOptions,\n  'forceUnit' | 'withZero'\n> & {\n  forceUnit?: string | undefined | false\n  fixedDecimals?: number\n  removeTrailingZeros?: boolean\n}\n\nexport type TokenData = {\n  tokenDecimals: number\n  tokenSymbol: string\n}\n\n/**\n * Improved & extended version of `formatBalance` from `@polkadot/util`.\n */\nexport const formatBalance = (\n  api: ApiPromise | undefined,\n  value?: BN,\n  options?: BalanceFormatterOptions,\n  tokenData?: TokenData,\n): string => {\n  if (!value) return ''\n\n  const tokenDecimals = api?.registry?.chainDecimals?.[0] || tokenData?.tokenDecimals || 12\n  const tokenSymbol = api?.registry?.chainTokens?.[0] || tokenData?.tokenSymbol || 'Unit'\n\n  const _options: BalanceFormatterOptions = Object.assign(\n    {\n      decimals: tokenDecimals,\n      withUnit: true,\n      forceUnit: '-',\n    } satisfies BalanceFormatterOptions,\n    options,\n  )\n\n  let formattedBalance = polkadotFormatBalance(value, {\n    ..._options,\n    withUnit: false,\n    withZero: false,\n  } as PolkadotBalanceFormatterOptions)\n\n  // Convert to fixed decimals\n  if (_options.fixedDecimals !== undefined) {\n    // Remove siUnit amd add it back later\n    let siUnit\n    if (_options.forceUnit !== '-') {\n      siUnit = formattedBalance.split(' ')[1]\n      formattedBalance = formattedBalance.split(' ')[0]\n    }\n\n    // Apply fixed decimals\n    formattedBalance = toFixed(\n      formattedBalance,\n      _options.fixedDecimals,\n      _options.removeTrailingZeros,\n    )\n\n    if (siUnit) formattedBalance = `${formattedBalance} ${siUnit}`\n  }\n\n  // Place hairline space between number and `siUnit`\n  if (_options.forceUnit !== '-') {\n    const siUnit = formattedBalance.split(' ')[1]\n    formattedBalance = formattedBalance.split(' ')[0]\n    if (siUnit) formattedBalance = `${formattedBalance}\\u200A${siUnit}`\n  }\n\n  // Add token symbol\n  if (_options.withUnit === true) {\n    formattedBalance = `${formattedBalance} ${tokenSymbol}`\n  }\n\n  return formattedBalance\n}\n\n/**\n * Helper function to convert a number (as string) to have fixed decimals.\n */\nconst toFixed = (value: string | number, decimals: number, removeTrailingZeros?: boolean) => {\n  const _value: string = typeof value === 'string' ? value : `${value}`\n\n  let valueDecimals = _value.split('.')[1] || '0'\n  valueDecimals = parseFloat(`0.${valueDecimals}`).toFixed(decimals)\n  if (removeTrailingZeros) {\n    valueDecimals = `${+valueDecimals}`\n  }\n\n  const formattedValue = valueDecimals.split('.')[1]\n    ? `${_value.split('.')[0]}.${valueDecimals.split('.')[1]}`\n    : _value.split('.')[0]\n\n  return formattedValue\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { ContractPromise } from '@polkadot/api-contract'\nimport { ContractCallOutcome, ContractOptions } from '@polkadot/api-contract/types'\nimport { EventRecord } from '@polkadot/types/interfaces'\nimport { Callback, IKeyringPair, ISubmittableResult } from '@polkadot/types/types'\nimport { BN, stringCamelCase } from '@polkadot/util'\nimport { checkIfBalanceSufficient } from './checkIfBalanceSufficient'\nimport { decodeOutput } from './decodeOutput'\nimport { getAbiMessage } from './getAbiMessage'\nimport { getExtrinsicErrorMessage } from './getExtrinsicErrorMessage'\nimport { getMaxGasLimit } from './getGasLimit'\n\n/**\n * Performs a dry run for the given contract method and arguments.\n * Is used within `contractQuery` & `contractTx` for gas estimation.\n */\nexport const contractCallDryRun = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n): Promise<ContractCallOutcome> => {\n  const abiMessage = getAbiMessage(contract, method)\n  const address = (account as IKeyringPair)?.address || account\n  const { value, gasLimit, storageDepositLimit } = options\n  const result = await api.call.contractsApi.call<ContractCallOutcome>(\n    address,\n    contract.address,\n    value ?? new BN(0),\n    gasLimit ?? null,\n    storageDepositLimit ?? null,\n    abiMessage.toU8a(args),\n  )\n\n  return result\n}\n\n/**\n * Calls a given non-mutating contract method (query) with maximum possible gas limit.\n */\nexport const contractQuery = async (\n  api: ApiPromise,\n  address: string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n): Promise<ContractCallOutcome> => {\n  // HACK: This should be possible by setting the `gasLimit` to null or -1 in the future.\n  const gasLimit = getMaxGasLimit(api)\n\n  // Call actual query/tx\n  const queryFn = contract.query[stringCamelCase(method)]\n  return await queryFn(address, { ...options, gasLimit }, ...args)\n}\n\n/**\n * Calls a given mutating contract method (tx) and wraps it in a promise.\n * Before, a dry run is performed to determine the required gas & potential errors.\n */\nexport type ContractTxResult = {\n  dryResult: ContractCallOutcome\n  result?: ISubmittableResult\n  errorMessage?: ReturnType<typeof getExtrinsicErrorMessage> | 'ExtrinsicFailed'\n  errorEvent?: EventRecord\n  successEvent?: EventRecord\n  extrinsicHash?: string\n  extrinsicIndex?: number\n  blockHash?: string\n}\nexport const contractTx = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  contract: ContractPromise,\n  method: string,\n  options = {} as ContractOptions,\n  args = [] as unknown[],\n  statusCb?: Callback<ISubmittableResult>,\n): Promise<ContractTxResult> => {\n  // Check if account has sufficient balance\n  const hasSufficientBalance = await checkIfBalanceSufficient(api, account, options?.value)\n  if (!hasSufficientBalance) {\n    return Promise.reject({\n      errorMessage: 'TokenBelowMinimum',\n    })\n  }\n\n  // Dry run to determine required gas and potential errors\n  delete options.gasLimit\n  const dryResult = await contractCallDryRun(api, account, contract, method, options, args)\n  const { isError, decodedOutput } = decodeOutput(dryResult, contract, method)\n  if (isError)\n    return Promise.reject({\n      dryResult,\n      errorMessage: decodedOutput || 'Error',\n    })\n\n  // Call actual query/tx & wrap it in a promise\n  const gasLimit = dryResult.gasRequired\n  return new Promise(async (resolve, reject) => {\n    try {\n      const isDevelopment =\n        (api.runtimeChain || '').toLowerCase() === 'development' ? 'isInBlock' : 'isFinalized'\n      const finalStatus = isDevelopment ? 'isInBlock' : 'isFinalized'\n      const asFinalStatus = isDevelopment ? 'asInBlock' : 'asFinalized'\n\n      const tx = contract.tx[stringCamelCase(method)]({ ...options, gasLimit }, ...args)\n\n      const unsub = await tx.signAndSend(account, async (result) => {\n        statusCb?.(result)\n\n        const isFinalized = result?.status?.[finalStatus]\n        if (!isFinalized) return\n\n        // Determine extrinsic and block info\n        const extrinsicHash = result.txHash.toHex()\n        const extrinsicIndex = result.txIndex\n        const blockHash = result.status[asFinalStatus].toHex()\n\n        const errorEvent = result?.events.find(({ event }) =>\n          api.events.system.ExtrinsicFailed.is(event),\n        )\n        if (errorEvent) {\n          // Reject if `ExtrinsicFailed` event was found\n          reject({\n            dryResult,\n            errorMessage: decodeOutput || 'ExtrinsicFailed',\n            errorEvent,\n            extrinsicHash,\n            extrinsicIndex,\n            blockHash,\n          })\n          unsub?.()\n        } else {\n          // Resolve succesfully otherwise\n          const successEvent = result?.events.find(({ event }) =>\n            api.events.system.ExtrinsicSuccess.is(event),\n          )\n\n          resolve({\n            dryResult,\n            result,\n            successEvent,\n            extrinsicHash,\n            extrinsicIndex,\n            blockHash,\n          })\n          unsub?.()\n        }\n      })\n    } catch (e: any) {\n      console.error('Error during contract transaction:', e)\n      reject({ errorMessage: getExtrinsicErrorMessage(e), errorEvent: e })\n    }\n  })\n}\n","import { ContractPromise } from '@polkadot/api-contract'\nimport { stringCamelCase } from '@polkadot/util'\n\n/**\n * Returns the ABI message for the given method name within the given contract.\n */\nexport const getAbiMessage = (contract: ContractPromise, method: string) => {\n  const abiMessage = contract.abi.messages.find(\n    (m) => stringCamelCase(m.method) === stringCamelCase(method),\n  )\n  if (!abiMessage) {\n    throw new Error(`\"${method}\" not found in Contract`)\n  }\n  return abiMessage\n}\n","import { ContractPromise } from '@polkadot/api-contract'\nimport { ContractExecResult } from '@polkadot/types/interfaces'\nimport { AnyJson, TypeDef } from '@polkadot/types/types'\nimport { getAbiMessage } from './getAbiMessage'\n\n/**\n * Helper types & functions\n * SOURCE: https://github.com/paritytech/contracts-ui (GPL-3.0-only)\n */\ntype ContractResultErr = {\n  Err: AnyJson\n}\n\ninterface ContractResultOk {\n  Ok: AnyJson\n}\n\nfunction isErr(o: ContractResultErr | ContractResultOk | AnyJson): o is ContractResultErr {\n  return typeof o === 'object' && o !== null && 'Err' in o\n}\n\nfunction isOk(o: ContractResultErr | ContractResultOk | AnyJson): o is ContractResultOk {\n  return typeof o === 'object' && o !== null && 'Ok' in o\n}\n\nfunction getReturnTypeName(type: TypeDef | null | undefined) {\n  return type?.lookupName || type?.type || ''\n}\n\n/**\n * Decodes & unwraps outputs and errors of a given result, contract, and method.\n * Parsed error message can be found in `decodedOutput` if `isError` is true.\n * SOURCE: https://github.com/paritytech/contracts-ui (GPL-3.0-only)\n */\nexport function decodeOutput(\n  { result }: Pick<ContractExecResult, 'result' | 'debugMessage'>,\n  contract: ContractPromise,\n  method: string,\n): {\n  output: any\n  decodedOutput: string\n  isError: boolean\n} {\n  let output\n  let decodedOutput = ''\n  let isError = true\n\n  if (result.isOk) {\n    const flags = result.asOk.flags.toHuman()\n    isError = flags.includes('Revert')\n    const abiMessage = getAbiMessage(contract, method)\n    const returnType = abiMessage.returnType\n    const returnTypeName = getReturnTypeName(returnType)\n    const registry = contract.abi.registry\n    const r = returnType\n      ? registry.createTypeUnsafe(returnTypeName, [result.asOk.data]).toHuman()\n      : '()'\n    output = isOk(r) ? r.Ok : isErr(r) ? r.Err : r\n\n    const errorText = isErr(output)\n      ? typeof output.Err === 'object'\n        ? JSON.stringify(output.Err, null, 2)\n        : output.Err?.toString() ?? 'Error'\n      : output !== 'Ok'\n        ? output?.toString() || 'Error'\n        : 'Error'\n\n    const okText = isOk(r)\n      ? typeof output === 'object'\n        ? JSON.stringify(output, null, '\\t')\n        : output?.toString() ?? '()'\n      : JSON.stringify(output, null, '\\t') ?? '()'\n\n    decodedOutput = isError ? errorText : okText\n  } else if (result.isErr) {\n    output = result.toHuman()\n\n    let errorText\n    if (\n      isErr(output) &&\n      typeof output.Err === 'object' &&\n      Object.keys(output.Err || {}).length &&\n      typeof Object.values(output.Err || {})[0] === 'string'\n    ) {\n      const [errorKey, errorValue] = Object.entries(output.Err || {})[0]\n      errorText = `${errorKey}${errorValue}`\n    }\n\n    decodedOutput = errorText || 'Error'\n  }\n\n  return {\n    output,\n    decodedOutput,\n    isError,\n  }\n}\n","/**\n * Decodes the error message from an extrinsic's error event.\n */\nexport type ExstrinsicThrowErrorMessage = 'UserCancelled' | 'TokenBelowMinimum' | 'Error'\nexport const getExtrinsicErrorMessage = (errorEvent: any): ExstrinsicThrowErrorMessage => {\n  let errorMessage: ExstrinsicThrowErrorMessage = 'Error'\n\n  // Somewhat hacky way to detect user cancellations, but all wallets throw different errors.\n  if (\n    errorEvent?.message?.match(\n      /(user reject request|cancelled|rejected by user|user rejected approval)/i,\n    )\n  ) {\n    errorMessage = 'UserCancelled'\n  }\n\n  // Decode the error code from the RPC error message.\n  const errorText = errorEvent?.toString?.()\n  const rpcErrorCode =\n    errorText && typeof errorText === 'string' ? errorText.match(/RpcError: (\\d+):/i)?.[1] : null\n  switch (rpcErrorCode) {\n    case '1010':\n      errorMessage = 'TokenBelowMinimum'\n      break\n    default:\n      break\n  }\n\n  return errorMessage\n}\n","import { ApiPromise } from '@polkadot/api'\nimport type { WeightV2 } from '@polkadot/types/interfaces'\nimport { BN, bnToBn } from '@polkadot/util'\n\n/**\n * Helper function that returns Weights V2 `gasLimit` object.\n */\nexport const getGasLimit = (api: ApiPromise, _refTime: string | BN, _proofSize: string | BN) => {\n  const refTime = bnToBn(_refTime)\n  const proofSize = bnToBn(_proofSize)\n\n  return api.registry.createType('WeightV2', {\n    refTime,\n    proofSize,\n  }) as WeightV2\n}\n\n/**\n * Helper function that returns the maximum gas limit Weights V2 object\n * for an extrinsic based on the api chain constants.\n * NOTE: It's reduced by a given factor (defaults to 80%) to avoid storage exhaust.\n */\nexport const getMaxGasLimit = (api: ApiPromise, reductionFactor = 0.8) => {\n  const blockWeights = api.consts.system.blockWeights.toPrimitive() as any\n  const maxExtrinsic = blockWeights?.perClass?.normal?.maxExtrinsic\n  const maxRefTime = maxExtrinsic?.refTime\n    ? bnToBn(maxExtrinsic.refTime)\n        .mul(new BN(reductionFactor * 100))\n        .div(new BN(100))\n    : new BN(0)\n  const maxProofSize = maxExtrinsic?.proofSize\n    ? bnToBn(maxExtrinsic.proofSize)\n        .mul(new BN(reductionFactor * 100))\n        .div(new BN(100))\n    : new BN(0)\n\n  return getGasLimit(api, maxRefTime, maxProofSize)\n}\n","import { DeployedContract } from '@/types'\nimport { ApiPromise } from '@polkadot/api'\nimport { CodePromise } from '@polkadot/api-contract'\nimport { ContractOptions } from '@polkadot/api-contract/types'\nimport { EventRecord, SignedBlock } from '@polkadot/types/interfaces'\nimport { IKeyringPair } from '@polkadot/types/types'\nimport { stringCamelCase } from '@polkadot/util'\nimport { getMaxGasLimit } from './getGasLimit'\n\n/**\n * Uploads & instantiates a contract on-chain.\n */\nexport const deployContract = async (\n  api: ApiPromise,\n  account: IKeyringPair | string,\n  abi: any,\n  wasm: Uint8Array | string | Buffer,\n  constructorMethod = 'new',\n  args = [] as unknown[],\n  options = {} as ContractOptions,\n): Promise<DeployedContract> => {\n  return new Promise<{\n    address: string\n    hash: string\n    block: SignedBlock\n    blockNumber: number\n  }>(async (resolve, reject) => {\n    const code = new CodePromise(api, abi, wasm)\n    const gasLimit = getMaxGasLimit(api)\n    const constructorFn = code.tx[stringCamelCase(constructorMethod)]\n    const unsub = await constructorFn({ gasLimit, ...options }, ...args).signAndSend(\n      account,\n      async ({ events, contract, status }: any) => {\n        if (status?.isInBlock) {\n          unsub?.()\n\n          const extrinsicFailedEvent = events.find(\n            ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n          ) as EventRecord\n          if (!!extrinsicFailedEvent || !contract?.address) {\n            console.error(\n              `Contract '${abi?.contract.name}' could not be deployed`,\n              extrinsicFailedEvent?.event?.data?.toHuman(),\n            )\n            return reject()\n          }\n\n          const hash = abi?.source.hash\n          const address = contract.address.toString()\n\n          // Determine block number\n          const blockHash = status.asInBlock.toHex()\n          const block = await api.rpc.chain.getBlock(blockHash)\n          const blockNumber = block.block.header.number.toNumber()\n\n          console.log(\n            `Contract '${abi?.contract.name}' deployed under ${address} at block #${blockNumber}`,\n          )\n\n          return resolve({\n            address,\n            hash,\n            block,\n            blockNumber,\n          })\n        }\n      },\n    )\n  })\n}\n","{\"source\":{\"hash\":\"0xdb433067f226daf1542d03cfb9fb40560381fee51ac41a1fe2344cef297f18e9\",\"language\":\"ink! 4.0.0\",\"compiler\":\"rustc 1.65.0\",\"build_info\":{\"build_mode\":\"Debug\",\"cargo_contract_version\":\"2.0.0-beta\",\"rust_toolchain\":\"stable-aarch64-apple-darwin\",\"wasm_opt_settings\":{\"keep_debug_symbols\":false,\"optimization_passes\":\"Z\"}}},\"contract\":{\"name\":\"psp22\",\"version\":\"0.9.6\",\"authors\":[\"Yonatan Hornstein <yonatan@panoramaswap.com>\"]},\"spec\":{\"constructors\":[{\"args\":[{\"label\":\"total_supply\",\"type\":{\"displayName\":[\"Balance\"],\"type\":0}},{\"label\":\"name\",\"type\":{\"displayName\":[\"Option\"],\"type\":4}},{\"label\":\"symbol\",\"type\":{\"displayName\":[\"Option\"],\"type\":4}},{\"label\":\"decimal\",\"type\":{\"displayName\":[\"u8\"],\"type\":3}}],\"label\":\"new\",\"payable\":false,\"returnType\":{\"displayName\":[\"ink_primitives\",\"ConstructorResult\"],\"type\":5},\"selector\":\"0x9bae9d5e\"}],\"events\":[],\"lang_error\":{\"displayName\":[\"ink\",\"LangError\"],\"type\":6},\"messages\":[{\"args\":[{\"label\":\"owner\",\"type\":{\"displayName\":[\"psp22_external\",\"BalanceOfInput1\"],\"type\":7}}],\"label\":\"PSP22::balance_of\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":9},\"selector\":\"0x6568382f\"},{\"args\":[{\"label\":\"from\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferFromInput1\"],\"type\":7}},{\"label\":\"to\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferFromInput2\"],\"type\":7}},{\"label\":\"value\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferFromInput3\"],\"type\":0}},{\"label\":\"data\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferFromInput4\"],\"type\":2}}],\"label\":\"PSP22::transfer_from\",\"mutates\":true,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":10},\"selector\":\"0x54b3c76e\"},{\"args\":[{\"label\":\"to\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferInput1\"],\"type\":7}},{\"label\":\"value\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferInput2\"],\"type\":0}},{\"label\":\"data\",\"type\":{\"displayName\":[\"psp22_external\",\"TransferInput3\"],\"type\":2}}],\"label\":\"PSP22::transfer\",\"mutates\":true,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":10},\"selector\":\"0xdb20f9f5\"},{\"args\":[{\"label\":\"spender\",\"type\":{\"displayName\":[\"psp22_external\",\"ApproveInput1\"],\"type\":7}},{\"label\":\"value\",\"type\":{\"displayName\":[\"psp22_external\",\"ApproveInput2\"],\"type\":0}}],\"label\":\"PSP22::approve\",\"mutates\":true,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":10},\"selector\":\"0xb20f1bbd\"},{\"args\":[],\"label\":\"PSP22::total_supply\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":9},\"selector\":\"0x162df8c2\"},{\"args\":[{\"label\":\"spender\",\"type\":{\"displayName\":[\"psp22_external\",\"IncreaseAllowanceInput1\"],\"type\":7}},{\"label\":\"delta_value\",\"type\":{\"displayName\":[\"psp22_external\",\"IncreaseAllowanceInput2\"],\"type\":0}}],\"label\":\"PSP22::increase_allowance\",\"mutates\":true,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":10},\"selector\":\"0x96d6b57a\"},{\"args\":[{\"label\":\"spender\",\"type\":{\"displayName\":[\"psp22_external\",\"DecreaseAllowanceInput1\"],\"type\":7}},{\"label\":\"delta_value\",\"type\":{\"displayName\":[\"psp22_external\",\"DecreaseAllowanceInput2\"],\"type\":0}}],\"label\":\"PSP22::decrease_allowance\",\"mutates\":true,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":10},\"selector\":\"0xfecb57d5\"},{\"args\":[{\"label\":\"owner\",\"type\":{\"displayName\":[\"psp22_external\",\"AllowanceInput1\"],\"type\":7}},{\"label\":\"spender\",\"type\":{\"displayName\":[\"psp22_external\",\"AllowanceInput2\"],\"type\":7}}],\"label\":\"PSP22::allowance\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":9},\"selector\":\"0x4d47d921\"},{\"args\":[],\"label\":\"PSP22Metadata::token_decimals\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":13},\"selector\":\"0x7271b782\"},{\"args\":[],\"label\":\"PSP22Metadata::token_name\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":14},\"selector\":\"0x3d261bd4\"},{\"args\":[],\"label\":\"PSP22Metadata::token_symbol\",\"mutates\":false,\"payable\":false,\"returnType\":{\"displayName\":[\"ink\",\"MessageResult\"],\"type\":14},\"selector\":\"0x34205be5\"}]},\"storage\":{\"root\":{\"layout\":{\"struct\":{\"fields\":[{\"layout\":{\"struct\":{\"fields\":[{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":0}},\"name\":\"supply\"},{\"layout\":{\"root\":{\"layout\":{\"leaf\":{\"key\":\"0x1d458d3b\",\"ty\":0}},\"root_key\":\"0x1d458d3b\"}},\"name\":\"balances\"},{\"layout\":{\"root\":{\"layout\":{\"leaf\":{\"key\":\"0x0abd72fb\",\"ty\":0}},\"root_key\":\"0x0abd72fb\"}},\"name\":\"allowances\"},{\"layout\":{\"enum\":{\"dispatchKey\":\"0x00000000\",\"name\":\"Option\",\"variants\":{\"0\":{\"fields\":[],\"name\":\"None\"},\"1\":{\"fields\":[{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":1}},\"name\":\"0\"}],\"name\":\"Some\"}}}},\"name\":\"_reserved\"}],\"name\":\"Data\"}},\"name\":\"psp22\"},{\"layout\":{\"struct\":{\"fields\":[{\"layout\":{\"enum\":{\"dispatchKey\":\"0x00000000\",\"name\":\"Option\",\"variants\":{\"0\":{\"fields\":[],\"name\":\"None\"},\"1\":{\"fields\":[{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":2}},\"name\":\"0\"}],\"name\":\"Some\"}}}},\"name\":\"name\"},{\"layout\":{\"enum\":{\"dispatchKey\":\"0x00000000\",\"name\":\"Option\",\"variants\":{\"0\":{\"fields\":[],\"name\":\"None\"},\"1\":{\"fields\":[{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":2}},\"name\":\"0\"}],\"name\":\"Some\"}}}},\"name\":\"symbol\"},{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":3}},\"name\":\"decimals\"},{\"layout\":{\"enum\":{\"dispatchKey\":\"0x00000000\",\"name\":\"Option\",\"variants\":{\"0\":{\"fields\":[],\"name\":\"None\"},\"1\":{\"fields\":[{\"layout\":{\"leaf\":{\"key\":\"0x00000000\",\"ty\":1}},\"name\":\"0\"}],\"name\":\"Some\"}}}},\"name\":\"_reserved\"}],\"name\":\"Data\"}},\"name\":\"metadata\"}],\"name\":\"Contract\"}},\"root_key\":\"0x00000000\"}},\"types\":[{\"id\":0,\"type\":{\"def\":{\"primitive\":\"u128\"}}},{\"id\":1,\"type\":{\"def\":{\"tuple\":[]}}},{\"id\":2,\"type\":{\"def\":{\"sequence\":{\"type\":3}}}},{\"id\":3,\"type\":{\"def\":{\"primitive\":\"u8\"}}},{\"id\":4,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"index\":0,\"name\":\"None\"},{\"fields\":[{\"type\":2}],\"index\":1,\"name\":\"Some\"}]}},\"params\":[{\"name\":\"T\",\"type\":2}],\"path\":[\"Option\"]}},{\"id\":5,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":1}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":6}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":1},{\"name\":\"E\",\"type\":6}],\"path\":[\"Result\"]}},{\"id\":6,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"index\":1,\"name\":\"CouldNotReadInput\"}]}},\"path\":[\"ink_primitives\",\"LangError\"]}},{\"id\":7,\"type\":{\"def\":{\"composite\":{\"fields\":[{\"type\":8,\"typeName\":\"[u8; 32]\"}]}},\"path\":[\"ink_primitives\",\"types\",\"AccountId\"]}},{\"id\":8,\"type\":{\"def\":{\"array\":{\"len\":32,\"type\":3}}}},{\"id\":9,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":0}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":6}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":0},{\"name\":\"E\",\"type\":6}],\"path\":[\"Result\"]}},{\"id\":10,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":11}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":6}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":11},{\"name\":\"E\",\"type\":6}],\"path\":[\"Result\"]}},{\"id\":11,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":1}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":12}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":1},{\"name\":\"E\",\"type\":12}],\"path\":[\"Result\"]}},{\"id\":12,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":2,\"typeName\":\"String\"}],\"index\":0,\"name\":\"Custom\"},{\"index\":1,\"name\":\"InsufficientBalance\"},{\"index\":2,\"name\":\"InsufficientAllowance\"},{\"index\":3,\"name\":\"ZeroRecipientAddress\"},{\"index\":4,\"name\":\"ZeroSenderAddress\"},{\"fields\":[{\"type\":2,\"typeName\":\"String\"}],\"index\":5,\"name\":\"SafeTransferCheckFailed\"}]}},\"path\":[\"openbrush_contracts\",\"traits\",\"errors\",\"psp22\",\"PSP22Error\"]}},{\"id\":13,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":3}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":6}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":3},{\"name\":\"E\",\"type\":6}],\"path\":[\"Result\"]}},{\"id\":14,\"type\":{\"def\":{\"variant\":{\"variants\":[{\"fields\":[{\"type\":4}],\"index\":0,\"name\":\"Ok\"},{\"fields\":[{\"type\":6}],\"index\":1,\"name\":\"Err\"}]}},\"params\":[{\"name\":\"T\",\"type\":4},{\"name\":\"E\",\"type\":6}],\"path\":[\"Result\"]}}],\"version\":\"4\"}\n","import PSP22_Abi from '../metadata/psp22.json'\nexport const psp22Abi = PSP22_Abi as Record<string, any>\n","import { SubstrateDeployment } from '@/types'\nimport { ApiPromise } from '@polkadot/api'\nimport { ContractPromise } from '@polkadot/api-contract'\n\n/**\n * Returns the first matching deployment from the given `deployments` array\n * with an equal `contractId` and `networkId`\n */\nexport const getDeployment = (\n  deployments: SubstrateDeployment[],\n  contractId: string,\n  networkId: string,\n) => {\n  return deployments.find((deployment) => {\n    return (\n      deployment.contractId.toLowerCase() === contractId.toLowerCase() &&\n      deployment.networkId.toLowerCase() === (networkId || '').toLowerCase()\n    )\n  })\n}\n\n/**\n * Takes the first matching deployment from the given `deployments` array\n * with an equal `contractId` and `networkId` and creates a `ContractPromise`.\n */\nexport const getDeploymentContract = (\n  api: ApiPromise,\n  deployments: SubstrateDeployment[],\n  contractId: string,\n  networkId: string,\n) => {\n  const deployment = getDeployment(deployments || [], contractId, networkId)\n  if (!deployment) return undefined\n  return new ContractPromise(api, deployment?.abi, deployment?.address)\n}\n","{\n  \"alephzero-PSP22-INW-5H4aCwLKUpVpct6XGJzDGPPXFockNKQU2JUVNgUw6BXEPzST\": {\n    \"originChain\": \"alephzero\",\n    \"slug\": \"alephzero-PSP22-INW-5H4aCwLKUpVpct6XGJzDGPPXFockNKQU2JUVNgUw6BXEPzST\",\n    \"name\": \"Ink Whale Token\",\n    \"symbol\": \"INW\",\n    \"decimals\": 12,\n    \"assetType\": \"PSP22\",\n    \"metadata\": {\n      \"contractAddress\": \"5H4aCwLKUpVpct6XGJzDGPPXFockNKQU2JUVNgUw6BXEPzST\"\n    },\n    \"iconPath\": \"https://github.com/scio-labs/use-inkathon/raw/main/assets/asset-logos/inw.png\"\n  },\n  \"alephzero-PSP22-PANX-5GSGAcvqpF5SuH2MhJ1YUdbLAbssCjeqCn2miMUCWUjnr5DQ\": {\n    \"originChain\": \"alephzero\",\n    \"slug\": \"alephzero-PSP22-PANX-5GSGAcvqpF5SuH2MhJ1YUdbLAbssCjeqCn2miMUCWUjnr5DQ\",\n    \"name\": \"Panorama Swap Token\",\n    \"symbol\": \"PANX\",\n    \"decimals\": 12,\n    \"assetType\": \"PSP22\",\n    \"metadata\": {\n      \"contractAddress\": \"5GSGAcvqpF5SuH2MhJ1YUdbLAbssCjeqCn2miMUCWUjnr5DQ\"\n    },\n    \"iconPath\": \"https://github.com/scio-labs/use-inkathon/raw/main/assets/asset-logos/panx.png\"\n  },\n  \"alephzero-testnet-PSP22-INW-5FrXTf3NXRWZ1wzq9Aka7kTGCgGotf6wifzV7RzxoCYtrjiX\": {\n    \"originChain\": \"alephzero-testnet\",\n    \"slug\": \"alephzero-testnet-PSP22-INW-5FrXTf3NXRWZ1wzq9Aka7kTGCgGotf6wifzV7RzxoCYtrjiX\",\n    \"name\": \"Ink Whale Token\",\n    \"symbol\": \"INW\",\n    \"decimals\": 12,\n    \"assetType\": \"PSP22\",\n    \"metadata\": {\n      \"contractAddress\": \"5FrXTf3NXRWZ1wzq9Aka7kTGCgGotf6wifzV7RzxoCYtrjiX\"\n    },\n    \"iconPath\": \"https://github.com/scio-labs/use-inkathon/raw/main/assets/asset-logos/inw.png\"\n  }\n}\n","import { ChainAsset } from '@/types'\nimport PSP22_ASSETS from './data/PSP22_ASSETS.json'\n\n/**\n * Acknowledgement: PSP22_ASSETS.json is inspired by Subwallet's `ChainAsset.json`\n */\nexport const allPSP22Assets = PSP22_ASSETS as Record<string, ChainAsset>\n","import { allPSP22Assets } from '@/assets'\nimport { psp22Abi } from '@/helpers/getAbi'\nimport { ApiPromise } from '@polkadot/api'\nimport { ContractPromise } from '@polkadot/api-contract'\nimport { AccountId } from '@polkadot/types/interfaces'\nimport { BN } from '@polkadot/util'\nimport { contractQuery } from './contractCall'\nimport { decodeOutput } from './decodeOutput'\nimport { BalanceFormatterOptions, formatBalance } from './formatBalance'\n\nexport type PSP22BalanceData = {\n  tokenSlug: string\n  tokenDecimals: number\n  tokenSymbol: string\n  iconPath: string\n  balance?: BN\n  balanceFormatted?: string\n}\n\n/**\n * Default refresh interval for the PSP-22 token balances.\n */\nexport const PSP22_TOKEN_BALANCE_SUBSCRIPTION_INTERVAL = 60000\n\n/**\n * Returns the PSP-22 token balances of the given `address`.\n */\nexport const getPSP22Balances = async (\n  api: ApiPromise,\n  address: string | AccountId | undefined,\n  chainId: string,\n  formatterOptions?: BalanceFormatterOptions,\n): Promise<PSP22BalanceData[]> => {\n  const psp22ContractMap: Record<string, ContractPromise> = {}\n\n  Object.entries(allPSP22Assets).forEach(([slug, tokenInfo]) => {\n    psp22ContractMap[slug] = new ContractPromise(api, psp22Abi, tokenInfo.metadata?.contractAddress)\n  })\n\n  if (!address) {\n    const result = Object.values(allPSP22Assets)\n      .filter(({ originChain }) => originChain === chainId)\n      .map(({ slug, decimals, symbol, iconPath }) => {\n        return {\n          tokenSlug: slug,\n          tokenDecimals: decimals,\n          tokenSymbol: symbol,\n          iconPath,\n        }\n      })\n    return result\n  }\n\n  const result = await Promise.all(\n    Object.values(allPSP22Assets)\n      .filter(({ originChain }) => originChain === chainId)\n      .map(async ({ slug, decimals, symbol, iconPath }) => {\n        let balance = new BN(0)\n\n        const contract = psp22ContractMap[slug]\n        const response = await contractQuery(api, '', contract, 'psp22::balanceOf', {}, [address])\n        const { isError, decodedOutput } = decodeOutput(response, contract, 'psp22::balanceOf')\n\n        if (isError) throw new Error(decodedOutput)\n\n        const _balance = response.output?.toPrimitive() as Record<string, any>\n        balance = new BN(response.output ? (_balance.ok as string) || (_balance.Ok as string) : '0')\n\n        if (!balance) throw new Error('Invalid fetched balances')\n\n        const data = {\n          tokenDecimals: decimals,\n          tokenSymbol: symbol,\n          balance,\n        }\n\n        const balanceFormatted = parsePSP22Balance(data, formatterOptions)\n        return {\n          balanceFormatted,\n          tokenSlug: slug,\n          iconPath,\n          ...data,\n        }\n      }),\n  )\n\n  return result\n}\n\n/**\n * Watches the PSP-22 token balances of the given `address` and returns it in a callback.\n * The returned void function can be used to unsubscribe.\n */\nexport const watchPSP22Balances = (\n  api: ApiPromise,\n  address: string | AccountId | undefined,\n  callback: (data: PSP22BalanceData[]) => void,\n  chainId: string,\n  formatterOptions?: BalanceFormatterOptions,\n): VoidFunction | null => {\n  const psp22ContractMap: Record<string, ContractPromise> = {}\n\n  Object.entries(allPSP22Assets).forEach(([slug, tokenInfo]) => {\n    psp22ContractMap[slug] = new ContractPromise(api, psp22Abi, tokenInfo.metadata?.contractAddress)\n  })\n\n  if (!address) {\n    const result = Object.values(allPSP22Assets)\n      .filter(({ originChain }) => originChain === chainId)\n      .map(({ slug, decimals, symbol, iconPath }) => {\n        return {\n          tokenSlug: slug,\n          tokenDecimals: decimals,\n          tokenSymbol: symbol,\n          iconPath,\n        }\n      })\n    callback(result)\n    return null\n  }\n\n  // Function to query the chain, parse data, and return promisified data\n  const fetchTokenBalances = async () =>\n    callback(\n      await Promise.all(\n        Object.values(allPSP22Assets)\n          .filter(({ originChain }) => originChain === chainId)\n          .map(async ({ slug, decimals, symbol, iconPath }) => {\n            let balance = new BN(0)\n\n            const contract = psp22ContractMap[slug]\n            const response = await contractQuery(api, '', contract, 'psp22::balanceOf', {}, [\n              address,\n            ])\n            const { isError, decodedOutput } = decodeOutput(response, contract, 'psp22::balanceOf')\n\n            if (isError) throw new Error(decodedOutput)\n\n            const _balance = response.output?.toPrimitive() as Record<string, any>\n            balance = new BN(\n              response.output ? (_balance.ok as string) || (_balance.Ok as string) : '0',\n            )\n\n            if (!balance) throw new Error('Invalid fetched balances')\n\n            const data = {\n              tokenDecimals: decimals,\n              tokenSymbol: symbol,\n              balance,\n            }\n\n            const balanceFormatted = parsePSP22Balance(data, formatterOptions)\n            return {\n              balanceFormatted,\n              tokenSlug: slug,\n              iconPath,\n              ...data,\n            }\n          }),\n      ),\n    )\n\n  fetchTokenBalances()\n\n  // Create intervalId which can be used to unsubscribe\n  const intervalId = setInterval(fetchTokenBalances, PSP22_TOKEN_BALANCE_SUBSCRIPTION_INTERVAL)\n\n  return () => {\n    clearInterval(intervalId)\n  }\n}\n\n/**\n * Helper to parse the fetched PSP22 token balance data.\n */\nexport const parsePSP22Balance = (\n  data: Omit<PSP22BalanceData, 'tokenSlug' | 'iconPath'>,\n  formatterOptions?: BalanceFormatterOptions,\n): string => {\n  // Destructure necessary fields\n  const { tokenDecimals, tokenSymbol, balance } = data\n\n  // Format the balance\n  const balanceFormatted: string = formatBalance(undefined, balance, formatterOptions, {\n    tokenDecimals,\n    tokenSymbol,\n  })\n\n  return balanceFormatted\n}\n","import { SubstrateChain } from '@/types'\nimport { ApiPromise, HttpProvider, WsProvider } from '@polkadot/api'\nimport { ApiOptions } from '@polkadot/api/types'\nimport { cryptoWaitReady } from '@polkadot/util-crypto'\n\n/**\n * Helper to initialize polkadot.js API with given chain and options.\n */\nexport const initPolkadotJs = async (\n  chain: SubstrateChain,\n  options?: Omit<ApiOptions, 'provider'>,\n): Promise<{ api: ApiPromise; provider: WsProvider | HttpProvider }> => {\n  const rpcUrl = chain.rpcUrls[0]\n  if (!rpcUrl) {\n    throw new Error('Given chain has no RPC url defined')\n  }\n\n  // Wait for crypto to be ready to prevent initialization issues\n  await cryptoWaitReady()\n\n  const provider = rpcUrl.startsWith('http') ? new HttpProvider(rpcUrl) : new WsProvider(rpcUrl)\n  const api = await ApiPromise.create({\n    provider,\n    ...options,\n  })\n\n  return { api, provider }\n}\n","import { ApiPromise } from '@polkadot/api'\nimport { SubmittableExtrinsicFunction } from '@polkadot/api/types'\nimport { AccountId, EventRecord } from '@polkadot/types/interfaces'\nimport { AnyTuple, Callback, IKeyringPair, ISubmittableResult } from '@polkadot/types/types'\nimport { BN, bnToBn } from '@polkadot/util'\nimport { checkIfBalanceSufficient } from './checkIfBalanceSufficient'\nimport { ExstrinsicThrowErrorMessage, getExtrinsicErrorMessage } from './getExtrinsicErrorMessage'\n\nexport type TransferBalanceResult = {\n  result?: ISubmittableResult\n  errorMessage?: ExstrinsicThrowErrorMessage | 'ExtrinsicFailed'\n  errorEvent?: EventRecord\n}\n\n/**\n * Transfers a given amount of tokens from one account to another.\n */\nexport const transferBalance = async (\n  api: ApiPromise,\n  fromAccount: IKeyringPair | string,\n  toAddress: string | AccountId,\n  amount: bigint | BN | string | number,\n  allowDeath?: boolean,\n  statusCb?: Callback<ISubmittableResult>,\n): Promise<TransferBalanceResult> => {\n  const hasSufficientBalance = await checkIfBalanceSufficient(api, fromAccount, amount)\n  if (!hasSufficientBalance) {\n    return Promise.reject({ errorMessage: 'TokenBelowMinimum' } satisfies TransferBalanceResult)\n  }\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const transferFn = (api.tx.balances[\n        allowDeath ? 'transferAllowDeath' : 'transferKeepAlive'\n      ] || api.tx.balances['transfer']) as SubmittableExtrinsicFunction<'promise', AnyTuple>\n\n      const unsub = await transferFn(toAddress, bnToBn(amount)).signAndSend(\n        fromAccount,\n        (result: ISubmittableResult) => {\n          statusCb?.(result)\n          const isInBlock = result?.status?.isInBlock\n          if (!isInBlock) return\n          const errorEvent = result?.events.find(\n            ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n          )\n          if (isInBlock && errorEvent) {\n            // Reject if `ExtrinsicFailed` event was found\n            reject({ errorMessage: 'ExtrinsicFailed', errorEvent } satisfies TransferBalanceResult)\n            unsub?.()\n          } else if (isInBlock) {\n            // Otherwise resolve succesfully if transaction is in block\n            resolve({ result })\n            unsub?.()\n          }\n        },\n      )\n    } catch (e: any) {\n      console.error('Error while transferring balance:', e)\n      reject({\n        errorMessage: getExtrinsicErrorMessage(e),\n        errorEvent: e,\n      } satisfies TransferBalanceResult)\n    }\n  })\n}\n\n/**\n * Transfers all available tokens from one account to another.\n */\nexport const transferFullBalance = async (\n  api: ApiPromise,\n  fromAccount: IKeyringPair | string,\n  toAddress: string | AccountId,\n  keepAlive?: boolean,\n  statusCb?: Callback<ISubmittableResult>,\n): Promise<TransferBalanceResult> => {\n  const hasSufficientBalance = await checkIfBalanceSufficient(api, fromAccount)\n  if (!hasSufficientBalance) {\n    return Promise.reject({ errorMessage: 'TokenBelowMinimum' } satisfies TransferBalanceResult)\n  }\n\n  return new Promise(async (resolve, reject) => {\n    try {\n      const unsub = await api.tx.balances\n        .transferAll(toAddress, !!keepAlive)\n        .signAndSend(fromAccount, (result: ISubmittableResult) => {\n          statusCb?.(result)\n          const isInBlock = result?.status?.isInBlock\n          if (!isInBlock) return\n          const errorEvent = result?.events.find(\n            ({ event: { method } }: any) => method === 'ExtrinsicFailed',\n          )\n          if (isInBlock && errorEvent) {\n            // Reject if `ExtrinsicFailed` event was found\n            reject({ errorMessage: 'ExtrinsicFailed', errorEvent } satisfies TransferBalanceResult)\n            unsub?.()\n          } else if (isInBlock) {\n            // Otherwise resolve succesfully if transaction is in block\n            resolve({ result })\n            unsub?.()\n          }\n        })\n    } catch (e: any) {\n      console.error('Error while transferring full balance:', e)\n      reject({\n        errorMessage: getExtrinsicErrorMessage(e),\n        errorEvent: e,\n      } satisfies TransferBalanceResult)\n    }\n  })\n}\n","import { ContractCallOutcome } from '@polkadot/api-contract/types'\n\n/**\n * Unwraps a Weights V2 result type or errors if there is no 'ok' value.\n */\nexport const unwrapResultOrError = <T = any>(\n  outcome: Pick<ContractCallOutcome, 'result' | 'output'>,\n): T => {\n  const { result, output } = outcome\n  if (!result?.isOk || !output) {\n    throw new Error(`Error while unwrapping: ${result.toString()}`)\n  }\n  return (output.toPrimitive() as { ok: T }).ok\n}\n\n/**\n * Unwraps a Weights V2 result type or returns the given default if there is no 'ok' value.\n */\nexport const unwrapResultOrDefault = <T = any>(\n  outcome: Pick<ContractCallOutcome, 'result' | 'output'>,\n  defaultValue: T,\n): T => {\n  const { result, output } = outcome\n  let unwrappedResult: T = defaultValue\n  if (result?.isOk && !!output) {\n    unwrappedResult = (output.toPrimitive() as { ok: T }).ok\n  }\n  return unwrappedResult\n}\n"]}